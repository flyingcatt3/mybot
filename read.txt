常用快捷鍵
Ctrl + Shift + L 選取相同文字

.upper()      #全部字元轉成大寫
.lower()      #全部字元轉成小寫
.title()      #首字轉成大寫
.capitalize   #每個字詞的首字轉成大寫
.swapacase    #將大小寫顛倒

.strip()       #刪除前後的空格
.rstrip()      #刪除右邊的空格
.lstrip()      #刪除左邊的空格
.strip("0")     #刪除特定字元

新增和刪除空格
.center(30)      #產生一定數量的空格，並中心對齊一個給定的字串
.ljust(30)       #產生一定長度的空格並左對齊
.rjust(30)       #產生一定長度的空格並右對齊
"345".rjust(10,"0")  #能以任意字元填充空格
"345".zfill(10)      #在左邊填充一定數量的0
.center(30)      #產生一定數量的空格，並中心對齊一個給定的字串
.ljust(30)       #產生一定長度的空格並左對齊
.rjust(30)       #產生一定長度的空格並右對齊
"345".rjust(10,"0")  #能以任意字元填充空格
"345".zfill(10)      #在左邊填充一定數量的0

查詢和替換子字串
.find('fox')      #查詢子字串在字串中出現的索引，若搜尋不到子字串，會回傳-1
.index('fox')     #查詢子字串在字串中出現的索引，若搜尋不到子字串，會回傳ValueError
.rfind('fox')     #從尾部往前查詢子字串在字串中出現的索引
.endswith('dog')         #檢查字串尾部的子字串
linie.startswith('fox')      #檢查字串頭部的子字串
.replace('brown','red')  #以第2個參數替換子字串

拆分和分割字串
.partition('fox')
#partition()會回傳3個tuple，分別是:目標子字串之前的子字串、目標子字串、目標子字串之後的子字串
.rpartition('fox') #rpartition()從右向左搜尋字串
.split()           #split()預設以空白作為分割依據，回傳所有單字
       
haiku = """matsushima-ya
aah matsushima-ya
matsushima-ya"""
haiku.splitlines()      #splitlines()對換行符號進行分割
        
'--'.join(['1', '2', '3'])   #撤銷split()的結果，用分割依據再組成一個字串
print("\n".join(['matsushima-ya', 'aah matsushima-ya',    #常見的用法是用換行符號還原成原字串
'matsushima-ya']))

格式化字串
pi=3.14
"The value of pi is {}".format(pi)      #以{}代表將要插入字串格式化後的值
"""First letter: {0}. Last letter: {1}.""" .format('A', 'Z')
#{}中設定數字代表要插入的參數的索引
"""First letter: {first}. Last letter: {last}.""" .format(last='Z', first='A')
#若{}中包括了一個字串，則可以名稱指定要插入的值
"pi = {0:.3f}".format(pi)
#數字的插入，0代表要插入的參數的索引，:代表後面要跟著格式化的程式碼，.3f代表需要的精度資訊，小數點後保留3位小數的浮點數

使用正則表達式靈活地匹配字串模式 -略